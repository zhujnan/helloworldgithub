package com.teris;

import java.util.Random;

/**
 * 俄罗斯方块类，
 * 			L型，S型，O型，等。。。方块的父类
 * @author zhujn
 *
 */
public class Tetromino {
	protected Cell[] cells = new Cell[4];
	
	protected State[] states;
	//状态，每个方块都有的属性，共4种。
	
	protected int index = 10000;
	
	
	public static Tetromino randomOne() {
		/**
		 * 工厂方法：用于生成一个对象的方法，封装了
		 * 复杂的创建过程使用方便。
		 * 随机生成一个下落的俄罗斯方块
		 */
		Random random = new Random();
		int type = random.nextInt(7);
		switch (type) {
			case 0:return new T();
			case 1:return new I();
			case 2:return new S();
			case 3:return new Z();
			case 4:return new J();
			case 5:return new L();
			case 6:return new O();
		}
		return null;
	}
	/**
	 * 每个俄罗斯方块，都有一个共同的属性状态，
	 * 每种状态是不可以随意被创建的，所以把状态类写到
	 * 类的内部
	 * @author zhujn
	 *
	 */
	protected class State{
		int row0,col0,row1,col1,
			row2,col2,row3,col3;
		public State(int row0,int col0,
					int row1,int col1,
					int row2,int col2,
					int row3,int col3) {
			this.row0 = row0;
			this.col0 = col0;
			this.row1 = row1;
			this.col1 = col1;
			this.row2 = row2;
			this.col2 = col2;
			this.row3 = row3;
			this.col3 = col3;
		}
	}
	
	public void softDrop() {
		/**
		 * 俄罗斯方块下落的方法
		 */
		for(int i=0;i<cells.length;i++) {
			cells[i].softDrop();
		}
	}
	public void moveRight() {
		for(int i=0;i<cells.length;i++) {
			cells[i].moveRight();
		}
	}
	public void moveLeft() {
		for(int i=0;i<cells.length;i++) {
			cells[i].moveLeft();
		}
		
	}
	/*
	 * 旋转算法
	 */
	public void rotateRight() {
		/**
		 * 获取Sn(4组数据 0,1,2,3)
		 * 
		 * 获取当前轴
		 * 格子0轴坐标不变
		 * 
		 * 格子1行列=轴坐标+Sn(1)
		 * 格子2行列=轴坐标+Sn(2)
		 * 格子3行列=轴坐标+Sn(3)
		 * 
		 */
		index++;
		
		State s = states[index % states.length];
		Cell o = cells[0];
		int row = o.getRow();
		int col = o.getCol();
		
		cells[1].setRow(row+s.row1);
		cells[1].setCol(col+s.col1);
	}
	
	
}

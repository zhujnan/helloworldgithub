package com.teris;

import java.awt.Graphics;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.Timer;
import java.util.TimerTask;

import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JPanel;

/**
 * JPanel一个面板类
 * @author zhujn
 *
 */
public class Teris extends JPanel{
	
	//声明一个成员变量
	private Tetromino tetromino;//正在下落的方块
	private Tetromino nextOne;
	//1_1.声明一个俄罗斯方块成员变量
	private Timer timer;
	//2_2:声明一个定时器
	
	private int speed;
	//2_5:声明一个速度
	public static BufferedImage backgroud;
	public static BufferedImage T;
	public static BufferedImage I;
	public static BufferedImage S;
	public static BufferedImage Z;
	public static BufferedImage J;
	public static BufferedImage L;
	public static BufferedImage O;
	public static BufferedImage pause;
	
	public static final int ROWS = 20;
	public static final int COLS = 10;
	
	public static final int RUNNING = 0;
	public static final int PAUSE = 1;
	public static final int GAME_OVER = 2;
	private int state;
	
	
	private Cell[][] wall = new Cell[ROWS][COLS];
	
	static {
		try {
			backgroud = ImageIO
					.read(Teris.class//获取Class对象
							.getResource("TETRIS.png"));
			
			T = ImageIO.read(Teris.class.getResource("T.png"));
			S = ImageIO.read(Teris.class.getResource("S.png"));
			Z = ImageIO.read(Teris.class.getResource("Z.png"));
			J = ImageIO.read(Teris.class.getResource("J.png"));
			L = ImageIO.read(Teris.class.getResource("L.png"));
			I = ImageIO.read(Teris.class.getResource("I.png"));
			O = ImageIO.read(Teris.class.getResource("O.png"));
			pause=ImageIO.read(Teris.class.getResource("pause.png"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	@Override
	public void paint(Graphics g) {//绘制容器方法
		g.drawImage(backgroud, 0, 0, null);
		//用画笔对象绘制背景图片
		g.translate(15, 15);
		//将原点平移到当前坐标系中的位置
		paintWall(g);//画网格墙
		paintTetromino(g);//画出场的俄罗斯方块
		paintNextOne(g);
		//1_3.画下一个出场的方块
		paintState(g); //绘制游戏状态
	}
	private void paintState(Graphics g) {
		switch (state) {
		case GAME_OVER:
			      g.drawImage(pause,-15,-15,null);
			break;

		default:
			break;
		}
		
	}
	private void paintNextOne(Graphics g) {
		//1_4.编写绘出俄罗斯方块的代码
		if(nextOne ==null) {
			return;
		}
		Cell[] cells = nextOne.cells;
		for(int i=0;i<cells.length;i++) {
			Cell cell = cells[i];
			//1_5.修改x、y坐标值，在新的位置绘制
			int x = (cell.getCol()+10)*CELL_SIZE;
			int y = (cell.getRow()+1)*CELL_SIZE;
			g.drawImage(cell.getImage(), x, y, null);
		}
	
	}
	private void paintTetromino(Graphics g) {
		// TODO Auto-generated method stub
		if(tetromino ==null) {
			return;
		}
		Cell[] cells = tetromino.cells;
		for(int i=0;i<cells.length;i++) {
			Cell cell = cells[i];
			int x = cell.getCol()*CELL_SIZE;
			int y = cell.getRow()*CELL_SIZE;
			g.drawImage(cell.getImage(), x, y, null);
		}
	}
	/**
	 * 绘制游戏面板中的网格强
	 */
	public static final int CELL_SIZE=26;//指定方格的宽度
	private void paintWall(Graphics g) {
		for(int row = 0;row<wall.length;row++) {
			for(int col = 0;col<wall[row].length;col++) {
				int x = col * CELL_SIZE;
				int y = row * CELL_SIZE;
				Cell cell = wall[row][col];
				if(cell == null) {
					g.drawRect(x, y, CELL_SIZE, CELL_SIZE);
					//绘制指定 矩形边框
				}else {
					g.drawImage(cell.getImage(), x, y, null);
					//绘制指定图像中当前可用的图像
				}
			}
		}
	}

	public static void main(String[] args) {
		JFrame fram = new JFrame("俄罗斯方块");//窗格
		Teris teris = new Teris();//游戏面板
		fram.add(teris);//将面板添加到窗格中
		fram.setSize(525,550);//设置窗格的大小
		fram.setAlwaysOnTop(true);//总在最上
		fram.setUndecorated(true);//去掉边框
		fram.setLocationRelativeTo(null);
		fram.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		fram.setVisible(true);//调用paint()方法
		teris.action();
	}
	/**
	 * 软下落
	 */
	private void softDropAction() {
		/*
		 * 1.如果能够下落才下落，
		 * 2.不能下落着陆到墙里
		 * 
		 * ctrl + k
		 */
			if(canDrop()) {
				tetromino.softDrop();
			}else {
				landIntoWall();
				if(isGameOver()) {
					state = GAME_OVER;
				}else {
					tetromino =nextOne;
					nextOne = Tetromino.randomOne();
				}
			
			}
			
	}
	/**
	 * 如果下一个方块没有出场位置了，则
	 * 游戏结束。
	 * 下一个出场方块每个格子行列对应的墙上位置
	 * 如果有格子，游戏结束
	 * @return
	 */
	private boolean isGameOver() {
		Cell[] cells = nextOne.cells;
		for (Cell cell : cells) {
			int row = cell.getRow();
			int col = cell.getCol();
			if(wall[row][col]!=null) {
				return true;
			}
		}
		return false;
	}
	private void landIntoWall() {
		/**
		 * 根据每个格子的位置，进入到墙上对应的位置
		 */
		Cell[] cells = tetromino.cells;
		for (Cell cell : cells) {
			int row = cell.getRow();
			int col = cell.getCol();
			wall[row][col] = cell;
		}
				
		
	}
	private boolean canDrop() {
		/**
		 * 1.如果下落的方块中某个格子行到达19就不能下落了
		 * 2.方块的某个格子对应墙上的下方出现格子也不能下落
		 */
		Cell[] cells = tetromino.cells;
		for(int i=0;i<cells.length;i++) {
			Cell cell = cells[i];
			int row = cell.getRow();
			if(row == ROWS-1) {
				return false;
			}
		}
		/**
		 * 判断方块下方是否有下落的空间
		 */
		for(int i=0;i<cells.length;i++) {
			Cell cell = cells[i];
			int row = cell.getRow();
			int col = cell.getCol();
			if(wall[row+1][col]!=null) {
				return false;
			}
		}
		return true;
	}
	
	private void processRunningKey(int key) {
		switch(key) {
		case KeyEvent.VK_DOWN://执行向下键
				Teris.this.softDropAction();
				break;
		case KeyEvent.VK_RIGHT://执行向下键
			Teris.this.moveRightAction();  break;
			
		case KeyEvent.VK_P: state = PAUSE; break;	
		
		case KeyEvent.VK_LEFT: 
			Teris.this.moveLeftAction();   break;	
		}
	}
	private void moveLeftAction() {
		if(outOfBounds()||coincide()) {
			tetromino.moveRight();
		}
		tetromino.moveLeft();
	}
	//判断下落的方块是否与其他方块重合
	private boolean coincide() {
		Cell[] cells = tetromino.cells;
		for(int i=0;i<cells.length;i++) {
			Cell cell = cells[i];
			int row = cell.getRow();
			int col = cell.getCol();
			if(wall[row][col]!=null) {
				return true;
			}
		}
		return false;
	}
	/**
	 * 判断是否出界
	 * @return
	 */
	private boolean outOfBounds() {
		Cell[] cells = tetromino.cells;
		for(int i=0;i<cells.length;i++) {
			Cell cell = cells[i];
			int row = cell.getRow();
			int col = cell.getCol();
			if(row<0||row>=ROWS||col<0||col>=COLS) {
				return true;
			}
		}
		return false;
	}
	private void moveRightAction() {
	//	tetromino.moveRight();
		if(outOfBounds()||coincide()) {
			tetromino.moveLeft();
		}
		tetromino.moveRight();
	}
	private void processGameOverKey(int key) {
		switch (key) {
		case KeyEvent.VK_Q://按Q退出
				System.exit(0);
			break;
		case KeyEvent.VK_S://按S重新开始
			wall = new Cell[ROWS][COLS];
			tetromino = Tetromino.randomOne();
			nextOne = Tetromino.randomOne();
			state = RUNNING;
			break;
		default:
			break;
		}
		
	}
	private void processPauseKey(int key) {
		// TODO Auto-generated method stub
		
	}
	private void action() {
		tetromino = Tetromino.randomOne();
		nextOne = Tetromino.randomOne();
		state = RUNNING;
		//1_2.随机生成一个俄罗斯方块给成员变量赋值
		this.repaint();
		//2_1:重绘面板
		addKeyListener(new KeyAdapter() {
			@Override
			public void keyPressed(KeyEvent e) {
				int key = e.getKeyCode();
				//获取用户按下的键盘对应的,int值
				switch (state) {
			
				case RUNNING:processRunningKey(key);break;
				//运行时状态下：←↑→按键可以触发
				case GAME_OVER:processGameOverKey(key);break;
				//结束状态下：
				case PAUSE:processPauseKey(key);break;
				default:
					break;
				}
				repaint();
			}
		});
		
		
		
		setFocusable(true);
		requestFocus();
		
		timer = new Timer();
		//2_3:给定时器对象赋值
		timer.schedule(new TimerTask() {
			@Override
			public void run() {
				softDropAction();
				repaint();
			}
			
		}, 10,100);
		//2_4:10毫秒钟之后，每隔10毫秒执行一次时间任务
	}
}
